zipcodes.unique <- zipcodes %>%
select(zipcode) %>%
drop_na() %>%
unique() %>%
as.matrix()
cities.unique <- cities %>%
select(city) %>%
drop_na() %>%
unique()
zipcodes.unique <- zipcodes %>%
select(zipcode) %>%
drop_na() %>%
unique() %>%
as.matrix()
cities.unique <- cities %>%
select(city) %>%
drop_na() %>%
unique()
for(x in 1:length(zipcodes.unique)) { print(zipcodes.unique[x])}
api_key <- Quandl.api_key("dWNtubCoGPAP6EtAwK1x")
area <- "ZILLOW/Z" # Use zip code to search
indicator <- "_ZRIAH" # Zillow rental index (all homes)
rental_price = matrix(nrow = length(zipcodes.unique), ncol = 2)
for(i in 1: length(zipcodes.unique)) {
zip <- zipcodes.unique[i]
code <- str_c(area, zip, indicator)
tryCatch(data <- Quandl(code = str_c(area, zip, indicator), rows = 1), finally = next())
rental_price[i,1] = zip
rental_price[i,2] = data$Value[1]
}
View(rental_price)
api_key <- Quandl.api_key("dWNtubCoGPAP6EtAwK1x")
area <- "ZILLOW/Z" # Use zip code to search
code <- "00002"
indicator <- "_ZRIAH" # Zillow rental index (all homes)
data <- Quandl(code = str_c(area, code, indicator))
api_key <- Quandl.api_key("dWNtubCoGPAP6EtAwK1x")
area <- "ZILLOW/M" # Use zip code to search
code <- "00002"
indicator <- "_ZRIAH" # Zillow rental index (all homes)
data <- Quandl(code = str_c(area, code, indicator))
?Quandl
api_key <- Quandl.api_key("dWNtubCoGPAP6EtAwK1x")
area <- "ZILLOW/M" # Use zip code to search
code <- "00002"
indicator <- "_ZRIAH" # Zillow rental index (all homes)
data <- quandl.api(path = str_c(area, code, indicator), http = c("GET"))
api_key <- Quandl.api_key("dWNtubCoGPAP6EtAwK1x")
area <- "ZILLOW/Z" # Use zip code to search
code <- "10026"
indicator <- "_ZRIAH" # Zillow rental index (all homes)
data <- quandl.api(path = str_c(area, code, indicator), http = c("GET"))
api_key <- Quandl.api_key("dWNtubCoGPAP6EtAwK1x")
area <- "ZILLOW/M" # Use zip code to search
code <- "00002"
indicator <- "_ZRIAH" # Zillow rental index (all homes)
data <- quandl.api(path = str_c(area, code, indicator), http = "GET")
str_c(area, code, indicator)
api_key <- Quandl.api_key("dWNtubCoGPAP6EtAwK1x")
area <- "ZILLOW/M" # Use zip code to search
code <- "00002"
indicator <- "_ZRIAH" # Zillow rental index (all homes)
data <- quandl.api(path = str_c("datasets/",area, code, indicator), http = "GET")
api_key <- Quandl.api_key("dWNtubCoGPAP6EtAwK1x")
area <- "ZILLOW/Z" # Use zip code to search
code <- "10026"
indicator <- "_ZRIAH" # Zillow rental index (all homes)
data <- quandl.api(path = str_c("datasets/",area, code, indicator), http = "GET")
data
m <- matrix(nrow = 2, ncol = 2)
m[1,1] <- 2
m[1,2] <- "galen"
m
api_key <- Quandl.api_key("dWNtubCoGPAP6EtAwK1x")
area <- "ZILLOW/Z" # Use zip code to search
indicator <- "_ZRIAH" # Zillow rental index (all homes)
rental_price = matrix(nrow = length(zipcodes.unique), ncol = 2)
for(i in 1: length(zipcodes.unique)) {
zip <- zipcodes.unique[i]
code <- str_c(area, zip, indicator)
tryCatch(data <- Quandl(code = str_c(area, zip, indicator), rows = 1), finally = next())
rental_price[i,1] <- zip
rental_price[i,2] <- data$Value[1]
}
View(rental_price)
View(rental_price)
city <- "10026"
api_key <- Quandl.api_key()
area <- "ZILLOW/Z" # Use zip code to search
indicator <- "_ZRIAH" # Zillow rental index (all homes)
code <- str_c(area, city, indicator)
data <- Quandl(code = str_c(area, city, indicator))
View(data)
city <- "10026"
api_key <- Quandl.api_key()
area <- "ZILLOW/Z" # Use zip code to search
indicator <- "_ZRIAH" # Zillow rental index (all homes)
code <- str_c(area, city, indicator)
data <- Quandl(code = str_c(area, city, indicator), rows = 1)
city <- "10026"
api_key <- Quandl.api_key()
area <- "ZILLOW/Z" # Use zip code to search
indicator <- "_ZRIAH" # Zillow rental index (all homes)
code <- str_c(area, city, indicator)
data <- Quandl(code = str_c(area, city, indicator), rows = 1)
rental_price[1,2] <- data$Value
View(rental_price)
?tryCatch
packages.used <- c(
"tidyr",
"tibble",
"dplyr",
"readr",
"stringr",
"zipcode",
"geosphere"
)
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
for (pkg in as.vector(packages.used)) {
library(pkg, character.only = TRUE)
}
train <- read_csv(file = "../data/train.csv")
test <- read_csv(file = "../data/test.csv")
master <- train[c(1, 3:29)] %>%
bind_rows(test)
rentalPrice <- master %>%
select(id, zipcode) %>%
mutate(zipcode = str_extract(zipcode, pattern = "[0-9]{5}"))
packages.used <- c(
"tidyr",
"tibble",
"dplyr",
"readr",
"stringr",
"zipcode",
"geosphere"
)
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
for (pkg in as.vector(packages.used)) {
library(pkg, character.only = TRUE)
}
train <- read_csv(file = "../data/train.csv")
test <- read_csv(file = "../data/test.csv")
master <- train[c(1, 3:29)] %>%
bind_rows(test)
rentalPrice <- master %>%
select(id, zipcode) %>%
mutate(zipcode = str_extract(zipcode, pattern = "[0-9]{5}"))
source("../lib/location_functions.R")
print(getwd())
knitr::opts_knit$set(root.dir = normalizePath(".."))
source("lib/location_functions.R")
source("lib/location_functions.R")
ind <- getRentalIndex("10027")
?globalenv
source("lib/location_functions.R")
ind <- getRentalIndex("10027")
source("lib/location_functions.R")
ind <- getRentalIndex("10027")
source("lib/location_functions.R")
rentalIndex <- importZillowData()
ind <- getRentalIndex("10027")
source("lib/location_functions.R")
rentalIndex <- importZillowData()
ind <- getRentalIndex(10027)
source("lib/location_functions.R")
rentalIndex <- importZillowData()
ind <- getRentalIndex(as.vector("10026"))
install.packages("kernlab")
trace(utils:::unpackPkgZip, edit=TRUE)
install.packages("kernlab")
install.packages("mlbench")
library(kernlab)
library(mlbench)
obj <- mlbench.spirals(100,1,0.025)
my.data <-  4 * obj$x
View(obj)
plot(my.data)
typeof(my.data)
View(master)
install.packages("onehot")
library(onehot)
??onehot
data(iris)
iris
head(iris)
encoder<-onehot(iris)
encoder<-onehot(iris, addNA = TRUE)
encoder
x<-predict(encoder, iris)
x
head(iris)
head(x)
amenities <- master %>%
select(id, amenities) %>%
mutate(amenities = str_to_lower(amenities)) %>%
mutate(amenities = str_replace_all(amenities,"[{}\"]",""))
possible_amenities <- amenities %>%
separate_rows(amenities, sep = ",") %>%
select(amenities) %>%
unique()
View(possible_amenities)
?str_detect
View(amenities)
View(master)
View(train)
View(test)
View(train)
View(master)
head(test)
knitr::opts_knit$set(root.dir = normalizePath(".."))
packages.used <- c(
"tidyr",
"tibble",
"dplyr",
"readr",
"stringr",
"zipcode",
"geosphere"
)
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
for (pkg in as.vector(packages.used)) {
library(pkg, character.only = TRUE)
}
train <- read_csv(file = "../data/train.csv")
train <- read_csv(file = "../data/train.csv")
train <- read_csv(file = "data/train.csv")
test <- read_csv(file = "data/test.csv")
master <- train[c(1, 3:29)] %>%
bind_rows(test)
rentalPrice <- master %>%
select(id, zipcode) %>%
mutate(zipcode = str_extract(zipcode, pattern = "[0-9]{5}"))
unique_zipcodes <- rentalPrice %>%
select(zipcode) %>%
unique() %>%
as.vector()
source("../lib/location_functions.R")
source("lib/location_functions.R")
source('C:/Users/gasimmons/IdeaProjects/airbnb/lib/location_functions.R', echo=TRUE)
unique_zipcodes <- rentalPrice %>%
select(zipcode) %>%
unique() %>%
as.vector()
source("lib/location_functions.R")
getCoordFromZip("10027")
ind <- getRentalIndex("10026")
query_points <- zipcode %>%
select(longitude, latitude) %>%
as.matrix()
View(query_points)
View(zipcode)
View(zipcode)
source('C:/Users/gasimmons/IdeaProjects/airbnb/lib/location_functions.R')
source('C:/Users/gasimmons/IdeaProjects/airbnb/lib/location_functions.R')
ind <- getRentalIndex("10026")
View(zipcode)
str(zipcode)
ind <- getRentalIndex(as.character("10026"))
charZip<-"10026"
zipWithData <- rentalIndex %>%
select(zip)
query_city <- getCityFromZip(charZip)
query_points <- zipcode %>%
filter(city == query_city) %>%
select(longitude, latitude) %>%
as.matrix()
target_coord <- getCoordFromZip(charZip)
m <- distm(target_coord, query_points)
i <- which.min(m)
View(query_points)
source('C:/Users/gasimmons/IdeaProjects/airbnb/lib/location_functions.R')
source("lib/location_functions.R")
source('C:/Users/gasimmons/IdeaProjects/airbnb/lib/location_functions.R')
View(zipcode)
?data
data("zipcode")
source('C:/Users/gasimmons/IdeaProjects/airbnb/lib/location_functions.R')
source("lib/location_functions.R")
getCoordFromZip("10027")
ind <- getRentalIndex("10026")
source('C:/Users/gasimmons/IdeaProjects/airbnb/lib/location_functions.R')
ind <- getRentalIndex("10026")
source('C:/Users/gasimmons/IdeaProjects/airbnb/lib/location_functions.R')
ind <- getRentalIndex("10026")
ind <- getRentalIndex(as.list("10026"))
View(rentalIndex)
rentalIndex[zip=="10026",]
rentalIndex[$zip=="10026",]
zipcode[zip=="10026"]
zipcode[zip%in%"10026"]
zipcode[zip %in% c("10026")]
zipcode[which(zipcode$zip == "10026"),]
zipcode[which(zipcode$zip == "10026"), rentalIndex]
zipcode[which(zipcode$zip == "10026")]
zipcode[which(zipcode$zip == "10026"),]
rentalIndex[which(rentalindex$zip == "10026"),rentalIndex]
rentalIndex[which(rentalindex$zip == "10026"),]
rentalIndex[zip == "10026"]
rentalIndex[zip == "10026",]
rentalIndex[which(rentalIndex$zip == "10026"),]
rentalIndex[which(rentalIndex$zip == "10026"),"rentalindex"]
as.numeric(rentalIndex[which(rentalIndex$zip == "10026"),"rentalindex"])
as.numeric(rentalIndex[which(rentalIndex$zip == "10040"),"rentalindex"])
as.numeric(rentalIndex[which(rentalIndex$zip == "100470"),"rentalindex"])
source('C:/Users/gasimmons/IdeaProjects/airbnb/lib/location_functions.R')
ind <- getRentalIndex(as.list("10026"))
ind <- getRentalIndex("10026")
source('C:/Users/gasimmons/IdeaProjects/airbnb/lib/location_functions.R')
ind <- getRentalIndex("10026")
ind <- getRentalIndex("10040")
?matrix
View(unique_zipcodes)
filledRentalIndex <- unique_zipcodes %>%
mutate(rentalIndex = getRentalIndex(zipcode))
?mutate
n <- length(unique_zipcodes)
m <- matrix(0, nrow = n)
for (i in 1:n) {
z <- unique_zipcodes$zipcode[i]
m[i,1] <- getRentalIndex(z)
}
View(m)
n <- length(unique_zipcodes)
m <- matrix(0, nrow = n)
for (i = 1:n) {
length(unique_zipcodes$zipcode)
n <- length(unique_zipcodes$zipcode)
m <- matrix(0, nrow = n)
for (i in 1:n) {
z <- unique_zipcodes$zipcode[i]
m[i,1] <- getRentalIndex(z)
}
View(m)
n <- length(unique_zipcodes$zipcode)
m <- matrix(0, nrow = n)
for (i in 1:n) {
z <- unique_zipcodes$zipcode[i]
m[i,1] <- getRentalIndex(z)
}
n <- length(unique_zipcodes$zipcode)
m <- matrix(0, nrow = n, ncol = 1)
for (i in 1:n) {
z <- unique_zipcodes$zipcode[i]
m[i,1] <- getRentalIndex(z)
}
source('C:/Users/gasimmons/IdeaProjects/airbnb/lib/location_functions.R')
n <- length(unique_zipcodes$zipcode)
m <- matrix(0, nrow = n, ncol = 1)
for (i in 1:n) {
z <- unique_zipcodes$zipcode[i]
m[i,1] <- getRentalIndex(z)
}
source('C:/Users/gasimmons/IdeaProjects/airbnb/lib/location_functions.R')
n <- length(unique_zipcodes$zipcode)
m <- matrix(0, nrow = n, ncol = 1)
for (i in 1:n) {
z <- unique_zipcodes$zipcode[i]
m[i,1] <- getRentalIndex(z)
}
source('C:/Users/gasimmons/IdeaProjects/airbnb/lib/location_functions.R')
n <- length(unique_zipcodes$zipcode)
m <- matrix(0, nrow = n, ncol = 1)
for (i in 1:n) {
z <- unique_zipcodes$zipcode[i]
m[i,1] <- getRentalIndex(z)
}
source('C:/Users/gasimmons/IdeaProjects/airbnb/lib/location_functions.R')
n <- length(unique_zipcodes$zipcode)
m <- matrix(0, nrow = n, ncol = 1)
for (i in 1:n) {
z <- unique_zipcodes$zipcode[i]
m[i,1] <- getRentalIndex(z)
}
source('C:/Users/gasimmons/IdeaProjects/airbnb/lib/location_functions.R')
trace(utils:::unpackPkgZip, edit=TRUE)
install.packages("sparklyr")
library(sparklyr)
install.packages("sparklyr")
library(sparklyr)
install.packages("mnormt")
library(sparklyr)
spark_install("2.0.1")
?spark_read_csv
?spark_connection
knitr::opts_knit$set(root.dir = normalizePath(".."))
sc <- spark_connect(master = "local")
spark_install(version = "2.1.0")
library(sparklyr)
sc <- spark_connect(master = "local")
library(sparklyr)
sc <- spark_connect(master = "local")
sc <- spark_connect(master = "local")
spark_install(version = "2.1.0")
spark_install()
sc <- spark_connect(master = "local")
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
library(sparklyr)
knitr::opts_knit$set(root.dir = normalizePath(".."))
path <- getwd()
trainFile <- normalizePath("data/train.csv")
testFile <- normalizePath("data/test.csv")
incomeFile <- normalizePath("data/ct_median_income.csv")
packages.used <- c(
"tidyr",
"tibble",
"dplyr",
"readr",
"stringr",
"zipcode",
"geosphere",
"sparklyr"
)
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
for (pkg in as.vector(packages.used)) {
library(pkg, character.only = TRUE)
}
train <- read_csv(file = "data/train.csv") %>% as.data.frame.table()
test <- read_csv(file = "data/test.csv") %>% as.data.frame.table()
cnames <- colnames(train)
drop.cols <- c("amenities","description", "name", "neighbourhood", "longitude", "latitude", "beds", "thumbnail_url" )
train <- train %>% select_(.dots= setdiff(names(.),drop.cols))
test <- test %>% select_(.dots= setdiff(names(.),drop.cols))
write_csv(train, "train_altered.csv")
write_csv(test, "test_altered.csv")
?spark_read_csv
spark_read_csv(sc, name = "train", path = "train_altered.csv")
sc <- spark_connect(master = "local")
spark_read_csv(sc, name = "train", path = "train_altered.csv")
?ft_quantile_discretizer
spark_disconnect_all()
knitr::opts_knit$set(root.dir = normalizePath(".."))
path <- getwd()
trainFile <- normalizePath("data/train.csv")
testFile <- normalizePath("data/test.csv")
incomeFile <- normalizePath("data/ct_median_income.csv")
packages.used <- c(
"tidyr",
"tibble",
"dplyr",
"readr",
"stringr",
"zipcode",
"geosphere",
"sparklyr"
)
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
for (pkg in as.vector(packages.used)) {
library(pkg, character.only = TRUE)
}
sc <- spark_connect(master = "local")
spark_read_csv(sc, name = "train", path = "data/train.csv")
#spark_read_csv(sc, name = "test", path = "data/test.csv")
cnames <- colnames(train)
drop.cols <- c("amenities","description", "name", "neighbourhood", "longitude", "latitude", "beds", "thumbnail_url" )
train <- train %>% select_(.dots= setdiff(names(.),drop.cols))
drop.cols <- c("amenities","description", "name", "neighbourhood", "longitude", "latitude", "beds", "thumbnail_url" )
train <- train %>% df %>% drop_columns(c('column1', 'column2'))
drop.cols <- c("amenities","description", "name", "neighbourhood", "longitude", "latitude", "beds", "thumbnail_url" )
train %>% df %>% drop_columns(c('column1', 'column2'))
traindata <- tbl(sc, "train")
partitions <- traindata %>%
drop_columns(c("amenities","description", "name", "neighbourhood", "longitude", "latitude", "beds", "thumbnail_url" )) %>%
sdf_mutate(
property_cat = ft_string_indexer(property_type),
room_cat = ft_string_indexer(room_type)
)
traindata <- tbl(sc, "train")
partitions <- traindata %>%
select_(.dots= setdiff(names(.),drop.cols)) %>%
sdf_mutate(
property_cat = ft_string_indexer(property_type),
room_cat = ft_string_indexer(room_type)
)
traindata <- tbl(sc, "train")
partitions <- traindata %>%
sdf_mutate(
property_cat = ft_string_indexer(property_type),
room_cat = ft_string_indexer(room_type)
)
partitions
db_list_tables(sc)
