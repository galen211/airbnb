%ls
getwd()
labels = df_train['country_destination']
df_train <- read_csv(file.path(data_path, "data/kaggle_data/train_users_2.csv"))
?library
?installed.packages
require(pkg)
print(pkg)
requiredLibraries <- c(
"xgboost",
"readr",
"stringr",
"caret",
"car"
)
requiredLibraries
typeof(requiredLibraries)
?vector
for (pkg in as.vector(requiredLibraries)) {
print(pkg)
}
for (pkg in as.vector(requiredLibraries)) {
require(pkg)
}
print(pkg)
requiredLibraries <- c(
"xgboost",
"readr",
"stringr",
"caret",
"car"
)
for (pkg in as.vector(requiredLibraries)) {
print(pkg)
}
requiredLibraries <- c(
"xgboost",
"readr",
"stringr",
"caret",
"car"
)
for (pkg in as.vector(requiredLibraries)) {
print(typeof(pkg))
}
?string
?require
requiredLibraries <- c(
"xgboost",
"readr",
"stringr",
"caret",
"car"
)
for (pkg in as.vector(requiredLibraries)) {
require(pkg, character.only = TRUE)
}
packages.used <- c(
"xgboost",
"readr",
"stringr",
"caret",
"car"
)
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
for (pkg in as.vector(requiredLibraries)) {
library(pkg, character.only = TRUE)
}
for (pkg in as.vector(requiredLibraries)) {
library(pkg, character.only = TRUE)
}
trace(utils:::unpackPkgZip, edit=TRUE)
packages.used <- c(
"xgboost",
"readr",
"stringr",
"caret",
"car"
)
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
for (pkg in as.vector(requiredLibraries)) {
library(pkg, character.only = TRUE)
}
data_path <- file.path("data/kaggle_data/")
df_train <- read_csv(file.path(data_path, "data/kaggle_data/train_users_2.csv"))
df_train <- read_csv("data/kaggle_data/train_users_2.csv")
df_test = read_csv("data/kaggle_data/test_users.csv")
labels = df_train['country_destination']
df_train = df_train[-grep('country_destination', colnames(df_train))]
View(df_test)
# combine train and test data
df_all = rbind(df_train,df_test)
# remove date_first_booking
df_all = df_all[-c(which(colnames(df_all) %in% c('date_first_booking')))]
# replace missing values
df_all[is.na(df_all)] <- -1
# split date_account_created in year, month and day
dac = as.data.frame(str_split_fixed(df_all$date_account_created, '-', 3))
df_all['dac_year'] = dac[,1]
df_all['dac_month'] = dac[,2]
df_all['dac_day'] = dac[,3]
df_all = df_all[,-c(which(colnames(df_all) %in% c('date_account_created')))]
# split timestamp_first_active in year, month and day
df_all[,'tfa_year'] = substring(as.character(df_all[,'timestamp_first_active']), 1, 4)
df_all['tfa_month'] = substring(as.character(df_all['timestamp_first_active']), 5, 6)
df_all['tfa_day'] = substring(as.character(df_all['timestamp_first_active']), 7, 8)
df_all = df_all[,-c(which(colnames(df_all) %in% c('timestamp_first_active')))]
# clean Age by removing values
df_all[df_all$age < 14 | df_all$age > 100,'age'] <- -1
# one-hot-encoding features
ohe_feats = c('gender', 'signup_method', 'signup_flow', 'language', 'affiliate_channel', 'affiliate_provider', 'first_affiliate_tracked', 'signup_app', 'first_device_type', 'first_browser')
dummies <- dummyVars(~ gender + signup_method + signup_flow + language + affiliate_channel + affiliate_provider + first_affiliate_tracked + signup_app + first_device_type + first_browser, data = df_all)
trace(utils:::unpackPkgZip, edit=TRUE)
install.packages("Rserve")
library(Rserve)
printNumber <- function(x) {
x
}
Rserve()
library(Rserve)
printNumber <- function(x) {
x
}
Rserve()
?Rserve
..getNamespace()
ls()
as.character(ls())
zipcodes <- train %>%
select(id, zipcode) %>%
mutate(zipcode = str_extract(zipcode, pattern = "[0-9]{5}"))
packages.used <- c(
"tidyr",
"tibble",
"dplyr",
"readr",
"Quandl",
"stringr"
)
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
for (pkg in as.vector(packages.used)) {
library(pkg, character.only = TRUE)
}
train <- read_csv(file = "../data/train.csv")
test <- read_csv(file = "../data/test.csv")
View(train)
cols(train)
master <- train[c(1, 3:29)] %>%
bind_rows(test)
View(master)
amenities <- master %>%
select(id, amenities) %>%
mutate(amenities = str_to_lower(amenities)) %>%
mutate(amenities = str_replace_all(amenities,"[{}\"]",""))
possible_amenities <- amenities %>%
separate_rows(amenities, sep = ",") %>%
select(amenities) %>%
unique()
zipcodes <- master %>%
select(id, zipcode) %>%
mutate(zipcode = str_extract(zipcode, pattern = "[0-9]{5}"))
cities <- master %>%
select(id, cities)
View(master)
zipcodes <- master %>%
select(id, zipcode) %>%
mutate(zipcode = str_extract(zipcode, pattern = "[0-9]{5}"))
cities <- master %>%
select(id,city)
zipcodes.unique <- zipcodes %>%
select(zipcode) %>%
drop_na() %>%
unique() %>%
as.matrix()
cities.unique <- cities %>%
select(city) %>%
drop_na() %>%
unique()
View(cities.unique)
cities
cities.unique
cities.unique
city_codes <- matrix(nrow = length(cities.unique), ncol = 2)
for(i in 1:length(cities.unique)) {
city_codes[i, 1] <- cities.unique[i]
}
# codes manually inputted using quandl file `data/quandl_cities`
cities.unique[1] <- "00002"
cities.unique[2] <- "00012"
cities.unique[3] <- "00008"
cities.unique[4] <- "00003"
cities.unique[5] <- "00004"
cities.unique[6] <- "00011"
zipcodes <- master %>%
select(id, zipcode) %>%
mutate(zipcode = str_extract(zipcode, pattern = "[0-9]{5}"))
cities <- master %>%
select(id,city)
city_codes <- matrix(nrow = length(cities.unique), ncol = 2)
for(i in 1:length(cities.unique)) {
city_codes[i, 1] <- cities.unique[i]
}
city_codes <- matrix(nrow = length(cities.unique), ncol = 2)
for(i = 1:length(cities.unique)) {
city_codes <- matrix(nrow = length(cities.unique), ncol = 2)
for(i in 1:length(cities.unique)) {
city_codes[i, 1] <- cities.unique[i]
}
length(cities.unique)
city_codes <- list(nrow = length(cities.unique), ncol = 2)
for(i in 1:length(cities.unique)) {
city_codes[i, 1] <- cities.unique[i]
}
city_codes <- list(x = 1:length(cities.unique), y = c("city","code"))
for(i in 1:length(cities.unique)) {
city_codes[i] <- cities.unique[i]
}
# codes manually inputted using quandl file `data/quandl_cities`
city_codes[1,2] <- "00002"
city_codes <- list(x = 1:length(cities.unique), y = c("city","code"))
for(i in 1:length(cities.unique)) {
city_codes[i] <- cities.unique[i]
}
# codes manually inputted using quandl file `data/quandl_cities`
city_codes[[1]] <- "00002"
city_codes[[2]] <- "00012"
city_codes[[3]] <- "00008"
city_codes[[4]] <- "00003"
city_codes[[5]] <- "00004"
city_codes[[6]] <- "00011"
city_codes
city <- "00002"
area <- "ZILLOW/M" # Use zip code to search
indicator <- "_ZRIAH" # Zillow rental index (all homes)
code <- str_c(area, city, indicator)
data <- Quandl(code = str_c(area, zip, indicator))
city <- "00002"
area <- "ZILLOW/M" # Use zip code to search
indicator <- "_ZRIAH" # Zillow rental index (all homes)
code <- str_c(area, city, indicator)
data <- Quandl(code = str_c(area, city, indicator))
city <- "00002"
api_key <- Quandl.api_key()
area <- "ZILLOW/M" # Use zip code to search
indicator <- "_ZRIAH" # Zillow rental index (all homes)
code <- str_c(area, city, indicator)
data <- Quandl(code = str_c(area, city, indicator))
?Quandl
?Quandl.api_key
api_key <- Quandl.api_key("dWNtubCoGPAP6EtAwK1x")
rental_price = matrix(nrow = length(zipcodes.unique), ncol = 2)
for(i in 1: length(zipcodes.unique)) {
zip <- zipcodes.unique[i]
code <- str_c(area, zip, indicator)
tryCatch(data <- Quandl(code = str_c(area, zip, indicator), rows = 1), finally = next())
rental_price[i,1] = zip
rental_price[i,2] = data$Value[1]
}
zipcodes.unique <- zipcodes %>%
select(zipcode) %>%
drop_na() %>%
unique() %>%
as.matrix()
cities.unique <- cities %>%
select(city) %>%
drop_na() %>%
unique()
zipcodes.unique <- zipcodes %>%
select(zipcode) %>%
drop_na() %>%
unique() %>%
as.matrix()
cities.unique <- cities %>%
select(city) %>%
drop_na() %>%
unique()
for(x in 1:length(zipcodes.unique)) { print(zipcodes.unique[x])}
api_key <- Quandl.api_key("dWNtubCoGPAP6EtAwK1x")
area <- "ZILLOW/Z" # Use zip code to search
indicator <- "_ZRIAH" # Zillow rental index (all homes)
rental_price = matrix(nrow = length(zipcodes.unique), ncol = 2)
for(i in 1: length(zipcodes.unique)) {
zip <- zipcodes.unique[i]
code <- str_c(area, zip, indicator)
tryCatch(data <- Quandl(code = str_c(area, zip, indicator), rows = 1), finally = next())
rental_price[i,1] = zip
rental_price[i,2] = data$Value[1]
}
View(rental_price)
api_key <- Quandl.api_key("dWNtubCoGPAP6EtAwK1x")
area <- "ZILLOW/Z" # Use zip code to search
code <- "00002"
indicator <- "_ZRIAH" # Zillow rental index (all homes)
data <- Quandl(code = str_c(area, code, indicator))
api_key <- Quandl.api_key("dWNtubCoGPAP6EtAwK1x")
area <- "ZILLOW/M" # Use zip code to search
code <- "00002"
indicator <- "_ZRIAH" # Zillow rental index (all homes)
data <- Quandl(code = str_c(area, code, indicator))
?Quandl
api_key <- Quandl.api_key("dWNtubCoGPAP6EtAwK1x")
area <- "ZILLOW/M" # Use zip code to search
code <- "00002"
indicator <- "_ZRIAH" # Zillow rental index (all homes)
data <- quandl.api(path = str_c(area, code, indicator), http = c("GET"))
api_key <- Quandl.api_key("dWNtubCoGPAP6EtAwK1x")
area <- "ZILLOW/Z" # Use zip code to search
code <- "10026"
indicator <- "_ZRIAH" # Zillow rental index (all homes)
data <- quandl.api(path = str_c(area, code, indicator), http = c("GET"))
api_key <- Quandl.api_key("dWNtubCoGPAP6EtAwK1x")
area <- "ZILLOW/M" # Use zip code to search
code <- "00002"
indicator <- "_ZRIAH" # Zillow rental index (all homes)
data <- quandl.api(path = str_c(area, code, indicator), http = "GET")
str_c(area, code, indicator)
api_key <- Quandl.api_key("dWNtubCoGPAP6EtAwK1x")
area <- "ZILLOW/M" # Use zip code to search
code <- "00002"
indicator <- "_ZRIAH" # Zillow rental index (all homes)
data <- quandl.api(path = str_c("datasets/",area, code, indicator), http = "GET")
api_key <- Quandl.api_key("dWNtubCoGPAP6EtAwK1x")
area <- "ZILLOW/Z" # Use zip code to search
code <- "10026"
indicator <- "_ZRIAH" # Zillow rental index (all homes)
data <- quandl.api(path = str_c("datasets/",area, code, indicator), http = "GET")
data
m <- matrix(nrow = 2, ncol = 2)
m[1,1] <- 2
m[1,2] <- "galen"
m
api_key <- Quandl.api_key("dWNtubCoGPAP6EtAwK1x")
area <- "ZILLOW/Z" # Use zip code to search
indicator <- "_ZRIAH" # Zillow rental index (all homes)
rental_price = matrix(nrow = length(zipcodes.unique), ncol = 2)
for(i in 1: length(zipcodes.unique)) {
zip <- zipcodes.unique[i]
code <- str_c(area, zip, indicator)
tryCatch(data <- Quandl(code = str_c(area, zip, indicator), rows = 1), finally = next())
rental_price[i,1] <- zip
rental_price[i,2] <- data$Value[1]
}
View(rental_price)
View(rental_price)
city <- "10026"
api_key <- Quandl.api_key()
area <- "ZILLOW/Z" # Use zip code to search
indicator <- "_ZRIAH" # Zillow rental index (all homes)
code <- str_c(area, city, indicator)
data <- Quandl(code = str_c(area, city, indicator))
View(data)
city <- "10026"
api_key <- Quandl.api_key()
area <- "ZILLOW/Z" # Use zip code to search
indicator <- "_ZRIAH" # Zillow rental index (all homes)
code <- str_c(area, city, indicator)
data <- Quandl(code = str_c(area, city, indicator), rows = 1)
city <- "10026"
api_key <- Quandl.api_key()
area <- "ZILLOW/Z" # Use zip code to search
indicator <- "_ZRIAH" # Zillow rental index (all homes)
code <- str_c(area, city, indicator)
data <- Quandl(code = str_c(area, city, indicator), rows = 1)
rental_price[1,2] <- data$Value
View(rental_price)
?tryCatch
packages.used <- c(
"tidyr",
"tibble",
"dplyr",
"readr",
"stringr",
"zipcode",
"geosphere"
)
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
for (pkg in as.vector(packages.used)) {
library(pkg, character.only = TRUE)
}
train <- read_csv(file = "../data/train.csv")
test <- read_csv(file = "../data/test.csv")
master <- train[c(1, 3:29)] %>%
bind_rows(test)
rentalPrice <- master %>%
select(id, zipcode) %>%
mutate(zipcode = str_extract(zipcode, pattern = "[0-9]{5}"))
packages.used <- c(
"tidyr",
"tibble",
"dplyr",
"readr",
"stringr",
"zipcode",
"geosphere"
)
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
for (pkg in as.vector(packages.used)) {
library(pkg, character.only = TRUE)
}
train <- read_csv(file = "../data/train.csv")
test <- read_csv(file = "../data/test.csv")
master <- train[c(1, 3:29)] %>%
bind_rows(test)
rentalPrice <- master %>%
select(id, zipcode) %>%
mutate(zipcode = str_extract(zipcode, pattern = "[0-9]{5}"))
source("../lib/location_functions.R")
print(getwd())
knitr::opts_knit$set(root.dir = normalizePath(".."))
source("lib/location_functions.R")
source("lib/location_functions.R")
ind <- getRentalIndex("10027")
?globalenv
source("lib/location_functions.R")
ind <- getRentalIndex("10027")
source("lib/location_functions.R")
ind <- getRentalIndex("10027")
source("lib/location_functions.R")
rentalIndex <- importZillowData()
ind <- getRentalIndex("10027")
source("lib/location_functions.R")
rentalIndex <- importZillowData()
ind <- getRentalIndex(10027)
source("lib/location_functions.R")
rentalIndex <- importZillowData()
ind <- getRentalIndex(as.vector("10026"))
install.packages("kernlab")
trace(utils:::unpackPkgZip, edit=TRUE)
install.packages("kernlab")
install.packages("mlbench")
library(kernlab)
library(mlbench)
obj <- mlbench.spirals(100,1,0.025)
my.data <-  4 * obj$x
View(obj)
plot(my.data)
typeof(my.data)
View(master)
install.packages("onehot")
library(onehot)
??onehot
data(iris)
iris
head(iris)
encoder<-onehot(iris)
encoder<-onehot(iris, addNA = TRUE)
encoder
x<-predict(encoder, iris)
x
head(iris)
head(x)
amenities <- master %>%
select(id, amenities) %>%
mutate(amenities = str_to_lower(amenities)) %>%
mutate(amenities = str_replace_all(amenities,"[{}\"]",""))
possible_amenities <- amenities %>%
separate_rows(amenities, sep = ",") %>%
select(amenities) %>%
unique()
View(possible_amenities)
?str_detect
View(amenities)
View(master)
View(train)
View(test)
View(train)
View(master)
head(test)
