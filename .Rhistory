%ls
getwd()
labels = df_train['country_destination']
df_train <- read_csv(file.path(data_path, "data/kaggle_data/train_users_2.csv"))
?library
?installed.packages
require(pkg)
print(pkg)
requiredLibraries <- c(
"xgboost",
"readr",
"stringr",
"caret",
"car"
)
requiredLibraries
typeof(requiredLibraries)
?vector
for (pkg in as.vector(requiredLibraries)) {
print(pkg)
}
for (pkg in as.vector(requiredLibraries)) {
require(pkg)
}
print(pkg)
requiredLibraries <- c(
"xgboost",
"readr",
"stringr",
"caret",
"car"
)
for (pkg in as.vector(requiredLibraries)) {
print(pkg)
}
requiredLibraries <- c(
"xgboost",
"readr",
"stringr",
"caret",
"car"
)
for (pkg in as.vector(requiredLibraries)) {
print(typeof(pkg))
}
?string
?require
requiredLibraries <- c(
"xgboost",
"readr",
"stringr",
"caret",
"car"
)
for (pkg in as.vector(requiredLibraries)) {
require(pkg, character.only = TRUE)
}
packages.used <- c(
"xgboost",
"readr",
"stringr",
"caret",
"car"
)
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
for (pkg in as.vector(requiredLibraries)) {
library(pkg, character.only = TRUE)
}
for (pkg in as.vector(requiredLibraries)) {
library(pkg, character.only = TRUE)
}
trace(utils:::unpackPkgZip, edit=TRUE)
packages.used <- c(
"xgboost",
"readr",
"stringr",
"caret",
"car"
)
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
for (pkg in as.vector(requiredLibraries)) {
library(pkg, character.only = TRUE)
}
data_path <- file.path("data/kaggle_data/")
df_train <- read_csv(file.path(data_path, "data/kaggle_data/train_users_2.csv"))
df_train <- read_csv("data/kaggle_data/train_users_2.csv")
df_test = read_csv("data/kaggle_data/test_users.csv")
labels = df_train['country_destination']
df_train = df_train[-grep('country_destination', colnames(df_train))]
View(df_test)
# combine train and test data
df_all = rbind(df_train,df_test)
# remove date_first_booking
df_all = df_all[-c(which(colnames(df_all) %in% c('date_first_booking')))]
# replace missing values
df_all[is.na(df_all)] <- -1
# split date_account_created in year, month and day
dac = as.data.frame(str_split_fixed(df_all$date_account_created, '-', 3))
df_all['dac_year'] = dac[,1]
df_all['dac_month'] = dac[,2]
df_all['dac_day'] = dac[,3]
df_all = df_all[,-c(which(colnames(df_all) %in% c('date_account_created')))]
# split timestamp_first_active in year, month and day
df_all[,'tfa_year'] = substring(as.character(df_all[,'timestamp_first_active']), 1, 4)
df_all['tfa_month'] = substring(as.character(df_all['timestamp_first_active']), 5, 6)
df_all['tfa_day'] = substring(as.character(df_all['timestamp_first_active']), 7, 8)
df_all = df_all[,-c(which(colnames(df_all) %in% c('timestamp_first_active')))]
# clean Age by removing values
df_all[df_all$age < 14 | df_all$age > 100,'age'] <- -1
# one-hot-encoding features
ohe_feats = c('gender', 'signup_method', 'signup_flow', 'language', 'affiliate_channel', 'affiliate_provider', 'first_affiliate_tracked', 'signup_app', 'first_device_type', 'first_browser')
dummies <- dummyVars(~ gender + signup_method + signup_flow + language + affiliate_channel + affiliate_provider + first_affiliate_tracked + signup_app + first_device_type + first_browser, data = df_all)
trace(utils:::unpackPkgZip, edit=TRUE)
install.packages("Rserve")
library(Rserve)
printNumber <- function(x) {
x
}
Rserve()
library(Rserve)
printNumber <- function(x) {
x
}
Rserve()
?Rserve
..getNamespace()
ls()
as.character(ls())
